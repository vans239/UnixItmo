
#!/bin/bash -e

# $1 - lock file dir
function lock(){
	#TODO semaphors"
	LOCK="$1/.fetch4me.lock"	
	MAX=500
	while [ -f $LOCK ] && [ $MAX -gt 0 ] ; do
		sleep 0.01	
		MAX=$[$MAX-1]		
	done
	if [ $MAX -eq 0 ] ; then
		echo "Error: File is locked for longtime" >> $QQEDIR/.status
		exit 1	
	fi
	echo $$ > $LOCK
}

# $1 - lock file dir
function unlock(){
	LOCK="$1/.fetch4me.lock"
	if [ ! -f $LOCK ]; then
		echo "Error: Somebody deleted my files!!!!!!!!" >> $QQEDIR/.status
		exit 1	
	fi
	rm $LOCK
}

# $1 - finished file
# $2 - link
# $3 - referer. optional
function finished(){
	echo "`date +%s` $3 $2" >> $1
}

# $1 - status file
# $2 - downloading file
# $3 - lock file dir
function status() {
	lock $3
	echo "Downloading $2" > $1
	unlock $3
}

# $1 - QQEDIR
# $2 - link to download
# $3 - optional referer link
function downloadLink() {
	DOWNLOADPATH=~/Downloads/fetched4you

	if  [ ! -d $DOWNLOADPATH ]; then
		echo "Created fetched4you"		
		mkdir $DOWNLOADPATH	
	fi

	referDir=${3//'http://'/''} 
	referDir=${referDir//'\'/'_'} 
	referDir=${referDir//' '/'_'}	
	referDir=${referDir//'\'/'_'} 
	downloadpath=$DOWNLOADPATH
	if [ $3 ]; then
		downloadpath=$downloadpath/$referDir
		if [ ! -d $downloadpath ]; then
				echo "Created referer $3"	
				mkdir $downloadpath
		fi
	fi

	pageDir=${2//'http://'/''} 
	pageDir=${pageDir//'/'/'_'} 
	pageDir=${pageDir//'\'/'_'} 
	pageDir=${pageDir//'\'/'_'}
	downloadpath=$downloadpath/$pageDir
	if [ ! -d $downloadpath ]; then
		echo "Created page $2"
		mkdir $downloadpath		
	fi

	status $1/.status $downloadpath $1 
	if [ $3 ]; then
		`$GETELEMFUNC -c -q -P $downloadpath --referer=$3 $2`
	else
		`$GETELEMFUNC -c -q -P $downloadpath $2`
	fi
	if [ $? -ne 0 ]; then
		echo "Error: problem with processing $2 via $GETLEMFUNC to $downloadpath" >> $1/.status
		exit 1
	fi
	finished $1/.finished $2 $3
	status $1/.status "ended" $1 
	return 0
}

# $1 - QQEDIR
# $2 - referer
function run {
	while [ 1 -ne 0 ] ; do
		lock $1
		urls=`cat $1/.queue`
		unlock $1
		
		for url in ${urls[@]};
		do
			downloadLink $1 $url $2			
		done
		
		lock $1
		echo > $1/.queue
		unlock $1
		sleep 10
	done		
}

# $1 - QQEDIR
function daemonazing(){
	PID="$1/.fetch4me.pid"
	if [ -f $PID ]; then
		echo "Other daemon was here"
		read pid < $PID				
		isAlive=`ps $pid | grep $pid | grep S+ | awk '{ print $1; }'`
		if [ -z $isAlive ]; then
			echo "Other daemon was crashed"
			#adding interrupted link
			url=`cat $1/.status | awk '{ split ($0, arr, "="); print arr[2]; }'`
			if [ $url ]; then
				echo $URL >> $QQEDIR/.queue
			fi
		else
			echo "Other daemon is alive. I will die"
			exit 0
		fi
	else 
		echo "Other daemon doesn't exist"
	fi
	
	#daemonizing
	if [ -f $1/.fetch4me.lock ] ; then
		rm -rf $1/.fetch4me.lock 	
	fi
	echo $$ > $1/.fetch4me.pid 
	trap "echo 'I am alive!!!!!'" SIGHUP		
}

#TODO bad reading need "~/.fetch4me"

QQEDIR=`cat ~/.fetch4merc | grep QQEDIR | awk '{ split ($0, arr, "="); print arr[2]; }'`
GETELEMFUNC=`cat ~/.fetch4merc | grep GETELEMFUNC | awk '{ split ($0, arr, "="); print arr[2]; }'`
FIRSTARG=0

if [ "$1" = "-w" ]; then
	QQEDIR=$2
	FIRSTARG=2
	if [ "$3" = "-r" ]; then
		REFERRER=$4
		FIRSTARG=4
	fi
elif [ "$1" = "-r" ]; then
	REFERRER=$2
	FIRSTARG=2
	if [ "$3" = "-w" ]; then
		QQEDIR=$4
		FIRSTARG=4
	fi
fi
if [ -z $QQEDIR ]; then
	QQEDIR="~/.fetch4me"
fi 	

if [ -z $GETELEMFUNC ]; then
	GETELEMFUNC="wget"
fi

echo "QQEDIR = $QQEDIR"
echo "GETELEMFUNC=$GETELEMFUNC"
echo "REFFER=$REFFER"
echo "My pid is $$, but i want live"

if [ ! -d $QQEDIR ]; then
	echo "QQEDIR doesn't  exist: $QQEDIR" >> $QQEDIR/.status
	exit 1 
fi 
if [ -z `which $GETELEMFUNC | awk '{ print $1; }'` ]; then 
	echo "GETELEMFUNC doesn't exist: $GETELEMFUNC" >> $QQEDIR/.status
	exit 1
fi



#adding links
ARGS=("$@")
lock $QQEDIR
for ((i=$FIRSTARG; i<${#ARGS[@]}; i++)); do
	URL=${ARGS[$i]}
	echo $URL >> $QQEDIR/.queue
done
unlock $QQEDIR

daemonazing $QQEDIR
run $QQEDIR $REFFER
